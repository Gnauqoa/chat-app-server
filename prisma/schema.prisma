generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model File {
  id Int @id @default(autoincrement())

  bolb Bytes
  type String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar Avatar?
  Voice  Voice?

  @@index([type])
}

model Voice {
  id Int @id @default(autoincrement())

  messageId Int     @unique
  message   Message @relation(fields: [messageId], references: [id])

  fileId Int  @unique
  file   File @relation(fields: [fileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avatar {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  fileId Int  @unique
  file   File @relation(fields: [fileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  name          String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  messages      Message[]
  password      String
  email         String     @unique
  featureFlagId Int?
  roles         Role[]
  JWTtoken      JWTtoken[]
  rooms         RoomUser[]
  Room          Room[]
  avatar        Avatar?
}

model RoomUser {
  userId    Int
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationships with User and Room
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
}

model JWTtoken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  users        User[]
  featureFlags FeatureFlag[]
}

model FeatureFlag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
}

model Room {
  id           Int      @id @default(autoincrement())
  name         String
  createdAt    DateTime @default(now())
  interactedAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ownerId      Int

  // Define the one-to-many relationship with Message
  messages Message[]

  // Define the one-to-many relationship with RoomUser
  users RoomUser[]
  owner User       @relation(fields: [ownerId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  userId    Int
  roomId    Int
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
  voice     Voice?
}
